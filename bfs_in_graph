#include<iostream>
#include<unordered_map>
#include<list>
#include<queue>
using namespace std;

template<class T>
class graph{
 public:
 unordered_map<T,list<T>>adj;
 void addedge(T u,T v,int direction){
     adj[u].push_back(v);
     if(direction == 0){
       adj[v].push_back(u);
     }
 }
 
 void printgraph(){
   for(auto i:adj){
      cout<<i.first<<" ->";
      for(auto j:i.second){
          cout<<j<<",";
      }cout<<endl;
   }
 }     
 };
 void bfs(unordered_map<int,list<int>>adj,int n)
 {
    unordered_map<int,bool>visited;
    queue<int> qu;
    qu.push(n);
    visited[n]=true;
    
    while(!qu.empty()){
       int currnode=qu.front();
       cout<<currnode<<" ";
       qu.pop();
       for(auto x:adj[currnode]){
          if(visited.find(x)==visited.end()){
              visited[x]=true;
              qu.push(x);
          }
       }
    }
 }
 int main(){
    graph<int>g;
    int m,direction;
    cout<<"Enter 1 for directed graph, 0 for undirected graph :";
    cin>>direction;
    cout<<"Enter number of edges :";
    cin>>m;
    for(int i=0;i<m;i++){
       int u,v;
       cout<<"Enter starting and ending nodes of edge "<<i+1<<" :";
       cin>>u>>v;
       g.addedge(u,v,direction);
    }
    g.printgraph();
    int startNode;
    cout<<"Enter starting node :";
    cin>>startNode;
    bfs(g.adj,startNode);  
    return 0;
 }
